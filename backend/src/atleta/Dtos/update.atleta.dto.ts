
import { PartialType } from '@nestjs/mapped-types';
import { Type } from 'class-transformer';
import { IsInt, IsOptional, Min } from 'class-validator';
import { CreateAtletaDto } from './create.atleta.dto';

// 丘멆잺 NOTA: Usamos PartialType de @nestjs/mapped-types para heredar
//         todos los campos de CreateAtletaDto y hacerlos opcionales.

export class UpdateAtletaDto extends PartialType(CreateAtletaDto) {
  // Los campos 'nombre', 'tiempo', 'posicion', y 'ciudadId' son ahora opcionales gracias a PartialType.

  // 游뚿 Sobreescribimos el DNI: sigue siendo opcional, pero si se env칤a, debe ser v치lido.
  @IsOptional()
  @Type(() => Number)
  @IsInt({ message: 'El DNI debe ser un n칰mero entero v치lido.' })
  @Min(1000000, { message: 'El DNI debe tener al menos 7 d칤gitos.' })
  dni?: number;
  
  // Sobreescribimos ciudadId para hacerlo opcional, pero mantenemos la validaci칩n si se env칤a
  @IsOptional()
  @Type(() => Number)
  @IsInt({ message: 'El ID de la ciudad debe ser un n칰mero entero v치lido.' })
  ciudadId?: number;
}